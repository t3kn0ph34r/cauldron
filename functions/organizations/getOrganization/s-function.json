{
  "name": "getOrganization",
  "runtime": "nodejs4.3",
  "description": "Get an Organization",
  "customName": false,
  "customRole": false,
  "handler": "organizations/getOrganization/handler.handler",
  "timeout": 6,
  "memorySize": 1024,
  "authorizer": {},
  "custom": {
    "excludePatterns": [
      "lib\\/config\\/.*?local.*",
      "lib\\\\config\\\\.*?local.*"
    ]
  },
  "endpoints": [
    {
      "path": "test/organizations/{id}",
      "method": "GET",
      "type": "AWS",
      "authorizationType": "none",
      "authorizerFunction": false,
      "apiKeyRequired": false,
      "requestParameters": {},
      "requestTemplates": {
        "application/json": "${apiGatewayTestRequestPassthrough}"
      },
      "responses": "$${responseTemplate}"
    },
    {
      "path": "organizations/{id}",
      "method": "GET",
      "type": "AWS",
      "authorizationType": "none",
      "authorizerFunction": false,
      "apiKeyRequired": false,
      "requestParameters": {},
      "requestTemplates": {
        "application/json": "${apiGatewayRequestPassthrough}"
      },
      "responses": "$${responseTemplate}"
    },
    {
      "path": "test/auth/organizations/{id}",
      "method": "GET",
      "type": "AWS",
      "authorizationType": "AWS_IAM",
      "authorizerFunction": false,
      "apiKeyRequired": false,
      "requestParameters": {},
      "requestTemplates": {
        "application/json": "${apiGatewayTestRequestPassthrough}"
      },
      "responses": "$${responseTemplate}"
    },
    {
      "path": "auth/organizations/{id}",
      "method": "GET",
      "type": "AWS",
      "authorizationType": "AWS_IAM",
      "authorizerFunction": false,
      "apiKeyRequired": false,
      "requestParameters": {},
      "requestTemplates": {
        "application/json": "${apiGatewayRequestPassthrough}"
      },
      "responses": "$${responseTemplate}"
    }
  ],
  "events": [],
  "environment": {
    "SERVERLESS_PROJECT": "${project}",
    "SERVERLESS_STAGE": "${stage}",
    "SERVERLESS_REGION": "${region}"
  },
  "vpc": {
    "securityGroupIds": [
      "${securityGroup1}"
    ],
    "subnetIds": [
      "${subnet1}",
      "${subnet2}"
    ]
  }
}